/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables.records;


import com.ims.dataAccess.tables.Usertype;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsertypeRecord extends UpdatableRecordImpl<UsertypeRecord> implements Record3<Integer, String, String> {

    private static final long serialVersionUID = -1281573230;

    /**
     * Setter for <code>inventorymanagement.usertype.userTypeId</code>.
     */
    public void setUsertypeid(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>inventorymanagement.usertype.userTypeId</code>.
     */
    public Integer getUsertypeid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>inventorymanagement.usertype.userTypename</code>.
     */
    public void setUsertypename(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>inventorymanagement.usertype.userTypename</code>.
     */
    public String getUsertypename() {
        return (String) get(1);
    }

    /**
     * Setter for <code>inventorymanagement.usertype.userTypeDescription</code>.
     */
    public void setUsertypedescription(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>inventorymanagement.usertype.userTypeDescription</code>.
     */
    public String getUsertypedescription() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Usertype.USERTYPE.USERTYPEID;
    }

    @Override
    public Field<String> field2() {
        return Usertype.USERTYPE.USERTYPENAME;
    }

    @Override
    public Field<String> field3() {
        return Usertype.USERTYPE.USERTYPEDESCRIPTION;
    }

    @Override
    public Integer component1() {
        return getUsertypeid();
    }

    @Override
    public String component2() {
        return getUsertypename();
    }

    @Override
    public String component3() {
        return getUsertypedescription();
    }

    @Override
    public Integer value1() {
        return getUsertypeid();
    }

    @Override
    public String value2() {
        return getUsertypename();
    }

    @Override
    public String value3() {
        return getUsertypedescription();
    }

    @Override
    public UsertypeRecord value1(Integer value) {
        setUsertypeid(value);
        return this;
    }

    @Override
    public UsertypeRecord value2(String value) {
        setUsertypename(value);
        return this;
    }

    @Override
    public UsertypeRecord value3(String value) {
        setUsertypedescription(value);
        return this;
    }

    @Override
    public UsertypeRecord values(Integer value1, String value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsertypeRecord
     */
    public UsertypeRecord() {
        super(Usertype.USERTYPE);
    }

    /**
     * Create a detached, initialised UsertypeRecord
     */
    public UsertypeRecord(Integer usertypeid, String usertypename, String usertypedescription) {
        super(Usertype.USERTYPE);

        set(0, usertypeid);
        set(1, usertypename);
        set(2, usertypedescription);
    }
}
