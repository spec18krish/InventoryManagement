/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables;


import com.ims.dataAccess.Indexes;
import com.ims.dataAccess.Inventorymanagement;
import com.ims.dataAccess.Keys;
import com.ims.dataAccess.tables.records.ProductcategoryRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Productcategory extends TableImpl<ProductcategoryRecord> {

    private static final long serialVersionUID = 267172388;

    /**
     * The reference instance of <code>inventorymanagement.productcategory</code>
     */
    public static final Productcategory PRODUCTCATEGORY = new Productcategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductcategoryRecord> getRecordType() {
        return ProductcategoryRecord.class;
    }

    /**
     * The column <code>inventorymanagement.productcategory.categoryId</code>.
     */
    public final TableField<ProductcategoryRecord, Integer> CATEGORYID = createField(DSL.name("categoryId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>inventorymanagement.productcategory.categoryName</code>.
     */
    public final TableField<ProductcategoryRecord, String> CATEGORYNAME = createField(DSL.name("categoryName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.productcategory.categoryDescription</code>.
     */
    public final TableField<ProductcategoryRecord, String> CATEGORYDESCRIPTION = createField(DSL.name("categoryDescription"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * Create a <code>inventorymanagement.productcategory</code> table reference
     */
    public Productcategory() {
        this(DSL.name("productcategory"), null);
    }

    /**
     * Create an aliased <code>inventorymanagement.productcategory</code> table reference
     */
    public Productcategory(String alias) {
        this(DSL.name(alias), PRODUCTCATEGORY);
    }

    /**
     * Create an aliased <code>inventorymanagement.productcategory</code> table reference
     */
    public Productcategory(Name alias) {
        this(alias, PRODUCTCATEGORY);
    }

    private Productcategory(Name alias, Table<ProductcategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Productcategory(Name alias, Table<ProductcategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Productcategory(Table<O> child, ForeignKey<O, ProductcategoryRecord> key) {
        super(child, key, PRODUCTCATEGORY);
    }

    @Override
    public Schema getSchema() {
        return Inventorymanagement.INVENTORYMANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCTCATEGORY_PRIMARY, Indexes.PRODUCTCATEGORY_PRODUCTCATEGORY_NAME_UNIQUE);
    }

    @Override
    public Identity<ProductcategoryRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCTCATEGORY;
    }

    @Override
    public UniqueKey<ProductcategoryRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCTCATEGORY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProductcategoryRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductcategoryRecord>>asList(Keys.KEY_PRODUCTCATEGORY_PRIMARY, Keys.KEY_PRODUCTCATEGORY_PRODUCTCATEGORY_NAME_UNIQUE);
    }

    @Override
    public Productcategory as(String alias) {
        return new Productcategory(DSL.name(alias), this);
    }

    @Override
    public Productcategory as(Name alias) {
        return new Productcategory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Productcategory rename(String name) {
        return new Productcategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Productcategory rename(Name name) {
        return new Productcategory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
