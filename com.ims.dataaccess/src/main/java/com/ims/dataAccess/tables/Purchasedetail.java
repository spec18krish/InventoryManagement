/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables;


import com.ims.dataAccess.Indexes;
import com.ims.dataAccess.Inventorymanagement;
import com.ims.dataAccess.Keys;
import com.ims.dataAccess.tables.records.PurchasedetailRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchasedetail extends TableImpl<PurchasedetailRecord> {

    private static final long serialVersionUID = -740289799;

    /**
     * The reference instance of <code>inventorymanagement.purchasedetail</code>
     */
    public static final Purchasedetail PURCHASEDETAIL = new Purchasedetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchasedetailRecord> getRecordType() {
        return PurchasedetailRecord.class;
    }

    /**
     * The column <code>inventorymanagement.purchasedetail.purchaseDetailId</code>.
     */
    public final TableField<PurchasedetailRecord, Integer> PURCHASEDETAILID = createField(DSL.name("purchaseDetailId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>inventorymanagement.purchasedetail.purchaseId</code>.
     */
    public final TableField<PurchasedetailRecord, Integer> PURCHASEID = createField(DSL.name("purchaseId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.purchasedetail.productId</code>.
     */
    public final TableField<PurchasedetailRecord, Integer> PRODUCTID = createField(DSL.name("productId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.purchasedetail.quantity</code>.
     */
    public final TableField<PurchasedetailRecord, Integer> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.purchasedetail.purchaseNotes</code>.
     */
    public final TableField<PurchasedetailRecord, String> PURCHASENOTES = createField(DSL.name("purchaseNotes"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * Create a <code>inventorymanagement.purchasedetail</code> table reference
     */
    public Purchasedetail() {
        this(DSL.name("purchasedetail"), null);
    }

    /**
     * Create an aliased <code>inventorymanagement.purchasedetail</code> table reference
     */
    public Purchasedetail(String alias) {
        this(DSL.name(alias), PURCHASEDETAIL);
    }

    /**
     * Create an aliased <code>inventorymanagement.purchasedetail</code> table reference
     */
    public Purchasedetail(Name alias) {
        this(alias, PURCHASEDETAIL);
    }

    private Purchasedetail(Name alias, Table<PurchasedetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private Purchasedetail(Name alias, Table<PurchasedetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Purchasedetail(Table<O> child, ForeignKey<O, PurchasedetailRecord> key) {
        super(child, key, PURCHASEDETAIL);
    }

    @Override
    public Schema getSchema() {
        return Inventorymanagement.INVENTORYMANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PURCHASEDETAIL_PRIMARY, Indexes.PURCHASEDETAIL_PRODUCT_PRODUCTID_FK, Indexes.PURCHASEDETAIL_PURCHASEDETAIL_PURCHASEID_FK);
    }

    @Override
    public Identity<PurchasedetailRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PURCHASEDETAIL;
    }

    @Override
    public UniqueKey<PurchasedetailRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASEDETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<PurchasedetailRecord>> getKeys() {
        return Arrays.<UniqueKey<PurchasedetailRecord>>asList(Keys.KEY_PURCHASEDETAIL_PRIMARY);
    }

    @Override
    public List<ForeignKey<PurchasedetailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PurchasedetailRecord, ?>>asList(Keys.PURCHASEDETAIL_PURCHASEID_FK, Keys.PRODUCT_PRODUCTID_FK);
    }

    public Purchase purchase() {
        return new Purchase(this, Keys.PURCHASEDETAIL_PURCHASEID_FK);
    }

    public Product product() {
        return new Product(this, Keys.PRODUCT_PRODUCTID_FK);
    }

    @Override
    public Purchasedetail as(String alias) {
        return new Purchasedetail(DSL.name(alias), this);
    }

    @Override
    public Purchasedetail as(Name alias) {
        return new Purchasedetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchasedetail rename(String name) {
        return new Purchasedetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchasedetail rename(Name name) {
        return new Purchasedetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
