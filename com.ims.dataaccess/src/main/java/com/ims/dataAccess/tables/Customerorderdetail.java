/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables;


import com.ims.dataAccess.Indexes;
import com.ims.dataAccess.Inventorymanagement;
import com.ims.dataAccess.Keys;
import com.ims.dataAccess.tables.records.CustomerorderdetailRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customerorderdetail extends TableImpl<CustomerorderdetailRecord> {

    private static final long serialVersionUID = -417357885;

    /**
     * The reference instance of <code>inventorymanagement.customerorderdetail</code>
     */
    public static final Customerorderdetail CUSTOMERORDERDETAIL = new Customerorderdetail();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerorderdetailRecord> getRecordType() {
        return CustomerorderdetailRecord.class;
    }

    /**
     * The column <code>inventorymanagement.customerorderdetail.customerOrderDetailId</code>.
     */
    public final TableField<CustomerorderdetailRecord, Integer> CUSTOMERORDERDETAILID = createField(DSL.name("customerOrderDetailId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>inventorymanagement.customerorderdetail.productId</code>.
     */
    public final TableField<CustomerorderdetailRecord, Integer> PRODUCTID = createField(DSL.name("productId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.customerorderdetail.quantity</code>.
     */
    public final TableField<CustomerorderdetailRecord, Integer> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.customerorderdetail.customerOrderId</code>.
     */
    public final TableField<CustomerorderdetailRecord, Integer> CUSTOMERORDERID = createField(DSL.name("customerOrderId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.customerorderdetail.orderDetailNotes</code>.
     */
    public final TableField<CustomerorderdetailRecord, String> ORDERDETAILNOTES = createField(DSL.name("orderDetailNotes"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * Create a <code>inventorymanagement.customerorderdetail</code> table reference
     */
    public Customerorderdetail() {
        this(DSL.name("customerorderdetail"), null);
    }

    /**
     * Create an aliased <code>inventorymanagement.customerorderdetail</code> table reference
     */
    public Customerorderdetail(String alias) {
        this(DSL.name(alias), CUSTOMERORDERDETAIL);
    }

    /**
     * Create an aliased <code>inventorymanagement.customerorderdetail</code> table reference
     */
    public Customerorderdetail(Name alias) {
        this(alias, CUSTOMERORDERDETAIL);
    }

    private Customerorderdetail(Name alias, Table<CustomerorderdetailRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customerorderdetail(Name alias, Table<CustomerorderdetailRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Customerorderdetail(Table<O> child, ForeignKey<O, CustomerorderdetailRecord> key) {
        super(child, key, CUSTOMERORDERDETAIL);
    }

    @Override
    public Schema getSchema() {
        return Inventorymanagement.INVENTORYMANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMERORDERDETAIL_CUSTOMERORDERDETAIL_CUSTOMERORDERID_FK, Indexes.CUSTOMERORDERDETAIL_CUSTOMERORDERDETAIL_PRODUCTID_FK, Indexes.CUSTOMERORDERDETAIL_PRIMARY);
    }

    @Override
    public Identity<CustomerorderdetailRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CUSTOMERORDERDETAIL;
    }

    @Override
    public UniqueKey<CustomerorderdetailRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMERORDERDETAIL_PRIMARY;
    }

    @Override
    public List<UniqueKey<CustomerorderdetailRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerorderdetailRecord>>asList(Keys.KEY_CUSTOMERORDERDETAIL_PRIMARY);
    }

    @Override
    public List<ForeignKey<CustomerorderdetailRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomerorderdetailRecord, ?>>asList(Keys.CUSTOMERORDERDETAIL_PRODUCTID_FK, Keys.CUSTOMERORDERDETAIL_CUSTOMERORDERID_FK);
    }

    public Product product() {
        return new Product(this, Keys.CUSTOMERORDERDETAIL_PRODUCTID_FK);
    }

    public Customerorder customerorder() {
        return new Customerorder(this, Keys.CUSTOMERORDERDETAIL_CUSTOMERORDERID_FK);
    }

    @Override
    public Customerorderdetail as(String alias) {
        return new Customerorderdetail(DSL.name(alias), this);
    }

    @Override
    public Customerorderdetail as(Name alias) {
        return new Customerorderdetail(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerorderdetail rename(String name) {
        return new Customerorderdetail(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerorderdetail rename(Name name) {
        return new Customerorderdetail(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, Integer, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
