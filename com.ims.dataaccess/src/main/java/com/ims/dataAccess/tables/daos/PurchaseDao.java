/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables.daos;


import com.ims.dataAccess.tables.Purchase;
import com.ims.dataAccess.tables.records.PurchaseRecord;

import java.sql.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PurchaseDao extends DAOImpl<PurchaseRecord, com.ims.dataAccess.tables.pojos.Purchase, Integer> {

    /**
     * Create a new PurchaseDao without any configuration
     */
    public PurchaseDao() {
        super(Purchase.PURCHASE, com.ims.dataAccess.tables.pojos.Purchase.class);
    }

    /**
     * Create a new PurchaseDao with an attached configuration
     */
    public PurchaseDao(Configuration configuration) {
        super(Purchase.PURCHASE, com.ims.dataAccess.tables.pojos.Purchase.class, configuration);
    }

    @Override
    public Integer getId(com.ims.dataAccess.tables.pojos.Purchase object) {
        return object.getPurchaseid();
    }

    /**
     * Fetch records that have <code>purchaseId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchRangeOfPurchaseid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Purchase.PURCHASE.PURCHASEID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>purchaseId IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchByPurchaseid(Integer... values) {
        return fetch(Purchase.PURCHASE.PURCHASEID, values);
    }

    /**
     * Fetch a unique record that has <code>purchaseId = value</code>
     */
    public com.ims.dataAccess.tables.pojos.Purchase fetchOneByPurchaseid(Integer value) {
        return fetchOne(Purchase.PURCHASE.PURCHASEID, value);
    }

    /**
     * Fetch records that have <code>purchaseName BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchRangeOfPurchasename(String lowerInclusive, String upperInclusive) {
        return fetchRange(Purchase.PURCHASE.PURCHASENAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>purchaseName IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchByPurchasename(String... values) {
        return fetch(Purchase.PURCHASE.PURCHASENAME, values);
    }

    /**
     * Fetch a unique record that has <code>purchaseName = value</code>
     */
    public com.ims.dataAccess.tables.pojos.Purchase fetchOneByPurchasename(String value) {
        return fetchOne(Purchase.PURCHASE.PURCHASENAME, value);
    }

    /**
     * Fetch records that have <code>purchaseDescription BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchRangeOfPurchasedescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Purchase.PURCHASE.PURCHASEDESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>purchaseDescription IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchByPurchasedescription(String... values) {
        return fetch(Purchase.PURCHASE.PURCHASEDESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>purchaseDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchRangeOfPurchasedate(Date lowerInclusive, Date upperInclusive) {
        return fetchRange(Purchase.PURCHASE.PURCHASEDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>purchaseDate IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchByPurchasedate(Date... values) {
        return fetch(Purchase.PURCHASE.PURCHASEDATE, values);
    }

    /**
     * Fetch records that have <code>deliveryDate BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchRangeOfDeliverydate(Date lowerInclusive, Date upperInclusive) {
        return fetchRange(Purchase.PURCHASE.DELIVERYDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>deliveryDate IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchByDeliverydate(Date... values) {
        return fetch(Purchase.PURCHASE.DELIVERYDATE, values);
    }

    /**
     * Fetch records that have <code>shipmentType BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchRangeOfShipmenttype(String lowerInclusive, String upperInclusive) {
        return fetchRange(Purchase.PURCHASE.SHIPMENTTYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>shipmentType IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Purchase> fetchByShipmenttype(String... values) {
        return fetch(Purchase.PURCHASE.SHIPMENTTYPE, values);
    }
}
