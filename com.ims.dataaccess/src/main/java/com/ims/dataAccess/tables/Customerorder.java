/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables;


import com.ims.dataAccess.Indexes;
import com.ims.dataAccess.Inventorymanagement;
import com.ims.dataAccess.Keys;
import com.ims.dataAccess.tables.records.CustomerorderRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Customerorder extends TableImpl<CustomerorderRecord> {

    private static final long serialVersionUID = -1660966708;

    /**
     * The reference instance of <code>inventorymanagement.customerorder</code>
     */
    public static final Customerorder CUSTOMERORDER = new Customerorder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CustomerorderRecord> getRecordType() {
        return CustomerorderRecord.class;
    }

    /**
     * The column <code>inventorymanagement.customerorder.customerOrderId</code>.
     */
    public final TableField<CustomerorderRecord, Integer> CUSTOMERORDERID = createField(DSL.name("customerOrderId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>inventorymanagement.customerorder.date</code>.
     */
    public final TableField<CustomerorderRecord, Date> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inventorymanagement.customerorder.orderDescription</code>.
     */
    public final TableField<CustomerorderRecord, String> ORDERDESCRIPTION = createField(DSL.name("orderDescription"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * The column <code>inventorymanagement.customerorder.customerId</code>.
     */
    public final TableField<CustomerorderRecord, Integer> CUSTOMERID = createField(DSL.name("customerId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>inventorymanagement.customerorder</code> table reference
     */
    public Customerorder() {
        this(DSL.name("customerorder"), null);
    }

    /**
     * Create an aliased <code>inventorymanagement.customerorder</code> table reference
     */
    public Customerorder(String alias) {
        this(DSL.name(alias), CUSTOMERORDER);
    }

    /**
     * Create an aliased <code>inventorymanagement.customerorder</code> table reference
     */
    public Customerorder(Name alias) {
        this(alias, CUSTOMERORDER);
    }

    private Customerorder(Name alias, Table<CustomerorderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Customerorder(Name alias, Table<CustomerorderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Customerorder(Table<O> child, ForeignKey<O, CustomerorderRecord> key) {
        super(child, key, CUSTOMERORDER);
    }

    @Override
    public Schema getSchema() {
        return Inventorymanagement.INVENTORYMANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CUSTOMERORDER_ORDER_CUSTOMERID_FK, Indexes.CUSTOMERORDER_PRIMARY);
    }

    @Override
    public Identity<CustomerorderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CUSTOMERORDER;
    }

    @Override
    public UniqueKey<CustomerorderRecord> getPrimaryKey() {
        return Keys.KEY_CUSTOMERORDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<CustomerorderRecord>> getKeys() {
        return Arrays.<UniqueKey<CustomerorderRecord>>asList(Keys.KEY_CUSTOMERORDER_PRIMARY);
    }

    @Override
    public List<ForeignKey<CustomerorderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CustomerorderRecord, ?>>asList(Keys.ORDER_CUSTOMERID_FK);
    }

    public Customer customer() {
        return new Customer(this, Keys.ORDER_CUSTOMERID_FK);
    }

    @Override
    public Customerorder as(String alias) {
        return new Customerorder(DSL.name(alias), this);
    }

    @Override
    public Customerorder as(Name alias) {
        return new Customerorder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerorder rename(String name) {
        return new Customerorder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Customerorder rename(Name name) {
        return new Customerorder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Date, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
