/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables.daos;


import com.ims.dataAccess.tables.Customerorder;
import com.ims.dataAccess.tables.records.CustomerorderRecord;

import java.sql.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CustomerorderDao extends DAOImpl<CustomerorderRecord, com.ims.dataAccess.tables.pojos.Customerorder, Integer> {

    /**
     * Create a new CustomerorderDao without any configuration
     */
    public CustomerorderDao() {
        super(Customerorder.CUSTOMERORDER, com.ims.dataAccess.tables.pojos.Customerorder.class);
    }

    /**
     * Create a new CustomerorderDao with an attached configuration
     */
    public CustomerorderDao(Configuration configuration) {
        super(Customerorder.CUSTOMERORDER, com.ims.dataAccess.tables.pojos.Customerorder.class, configuration);
    }

    @Override
    public Integer getId(com.ims.dataAccess.tables.pojos.Customerorder object) {
        return object.getCustomerorderid();
    }

    /**
     * Fetch records that have <code>customerOrderId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchRangeOfCustomerorderid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Customerorder.CUSTOMERORDER.CUSTOMERORDERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customerOrderId IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchByCustomerorderid(Integer... values) {
        return fetch(Customerorder.CUSTOMERORDER.CUSTOMERORDERID, values);
    }

    /**
     * Fetch a unique record that has <code>customerOrderId = value</code>
     */
    public com.ims.dataAccess.tables.pojos.Customerorder fetchOneByCustomerorderid(Integer value) {
        return fetchOne(Customerorder.CUSTOMERORDER.CUSTOMERORDERID, value);
    }

    /**
     * Fetch records that have <code>date BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchRangeOfDate(Date lowerInclusive, Date upperInclusive) {
        return fetchRange(Customerorder.CUSTOMERORDER.DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>date IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchByDate(Date... values) {
        return fetch(Customerorder.CUSTOMERORDER.DATE, values);
    }

    /**
     * Fetch records that have <code>orderDescription BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchRangeOfOrderdescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Customerorder.CUSTOMERORDER.ORDERDESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>orderDescription IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchByOrderdescription(String... values) {
        return fetch(Customerorder.CUSTOMERORDER.ORDERDESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>customerId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchRangeOfCustomerid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Customerorder.CUSTOMERORDER.CUSTOMERID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>customerId IN (values)</code>
     */
    public List<com.ims.dataAccess.tables.pojos.Customerorder> fetchByCustomerid(Integer... values) {
        return fetch(Customerorder.CUSTOMERORDER.CUSTOMERID, values);
    }
}
