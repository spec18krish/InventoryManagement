/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables;


import com.ims.dataAccess.Indexes;
import com.ims.dataAccess.Inventorymanagement;
import com.ims.dataAccess.Keys;
import com.ims.dataAccess.tables.records.PurchaseRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Purchase extends TableImpl<PurchaseRecord> {

    private static final long serialVersionUID = -568718080;

    /**
     * The reference instance of <code>inventorymanagement.purchase</code>
     */
    public static final Purchase PURCHASE = new Purchase();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PurchaseRecord> getRecordType() {
        return PurchaseRecord.class;
    }

    /**
     * The column <code>inventorymanagement.purchase.purchaseId</code>.
     */
    public final TableField<PurchaseRecord, Integer> PURCHASEID = createField(DSL.name("purchaseId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>inventorymanagement.purchase.purchaseName</code>.
     */
    public final TableField<PurchaseRecord, String> PURCHASENAME = createField(DSL.name("purchaseName"), org.jooq.impl.SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.purchase.purchaseDescription</code>.
     */
    public final TableField<PurchaseRecord, String> PURCHASEDESCRIPTION = createField(DSL.name("purchaseDescription"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "");

    /**
     * The column <code>inventorymanagement.purchase.purchaseDate</code>.
     */
    public final TableField<PurchaseRecord, Date> PURCHASEDATE = createField(DSL.name("purchaseDate"), org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.purchase.deliveryDate</code>.
     */
    public final TableField<PurchaseRecord, Date> DELIVERYDATE = createField(DSL.name("deliveryDate"), org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>inventorymanagement.purchase.shipmentType</code>.
     */
    public final TableField<PurchaseRecord, String> SHIPMENTTYPE = createField(DSL.name("shipmentType"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>inventorymanagement.purchase</code> table reference
     */
    public Purchase() {
        this(DSL.name("purchase"), null);
    }

    /**
     * Create an aliased <code>inventorymanagement.purchase</code> table reference
     */
    public Purchase(String alias) {
        this(DSL.name(alias), PURCHASE);
    }

    /**
     * Create an aliased <code>inventorymanagement.purchase</code> table reference
     */
    public Purchase(Name alias) {
        this(alias, PURCHASE);
    }

    private Purchase(Name alias, Table<PurchaseRecord> aliased) {
        this(alias, aliased, null);
    }

    private Purchase(Name alias, Table<PurchaseRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Purchase(Table<O> child, ForeignKey<O, PurchaseRecord> key) {
        super(child, key, PURCHASE);
    }

    @Override
    public Schema getSchema() {
        return Inventorymanagement.INVENTORYMANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PURCHASE_PRIMARY, Indexes.PURCHASE_PURCHASE_PURCHASENAME_UNIQUE);
    }

    @Override
    public Identity<PurchaseRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PURCHASE;
    }

    @Override
    public UniqueKey<PurchaseRecord> getPrimaryKey() {
        return Keys.KEY_PURCHASE_PRIMARY;
    }

    @Override
    public List<UniqueKey<PurchaseRecord>> getKeys() {
        return Arrays.<UniqueKey<PurchaseRecord>>asList(Keys.KEY_PURCHASE_PRIMARY, Keys.KEY_PURCHASE_PURCHASE_PURCHASENAME_UNIQUE);
    }

    @Override
    public Purchase as(String alias) {
        return new Purchase(DSL.name(alias), this);
    }

    @Override
    public Purchase as(Name alias) {
        return new Purchase(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchase rename(String name) {
        return new Purchase(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Purchase rename(Name name) {
        return new Purchase(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, Date, Date, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
