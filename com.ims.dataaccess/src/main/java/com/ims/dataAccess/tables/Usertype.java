/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables;


import com.ims.dataAccess.Indexes;
import com.ims.dataAccess.Inventorymanagement;
import com.ims.dataAccess.Keys;
import com.ims.dataAccess.tables.records.UsertypeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usertype extends TableImpl<UsertypeRecord> {

    private static final long serialVersionUID = 1405316557;

    /**
     * The reference instance of <code>inventorymanagement.usertype</code>
     */
    public static final Usertype USERTYPE = new Usertype();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsertypeRecord> getRecordType() {
        return UsertypeRecord.class;
    }

    /**
     * The column <code>inventorymanagement.usertype.userTypeId</code>.
     */
    public final TableField<UsertypeRecord, Integer> USERTYPEID = createField(DSL.name("userTypeId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>inventorymanagement.usertype.userTypeName</code>.
     */
    public final TableField<UsertypeRecord, String> USERTYPENAME = createField(DSL.name("userTypeName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.usertype.userTypeDescription</code>.
     */
    public final TableField<UsertypeRecord, String> USERTYPEDESCRIPTION = createField(DSL.name("userTypeDescription"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "");

    /**
     * Create a <code>inventorymanagement.usertype</code> table reference
     */
    public Usertype() {
        this(DSL.name("usertype"), null);
    }

    /**
     * Create an aliased <code>inventorymanagement.usertype</code> table reference
     */
    public Usertype(String alias) {
        this(DSL.name(alias), USERTYPE);
    }

    /**
     * Create an aliased <code>inventorymanagement.usertype</code> table reference
     */
    public Usertype(Name alias) {
        this(alias, USERTYPE);
    }

    private Usertype(Name alias, Table<UsertypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Usertype(Name alias, Table<UsertypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Usertype(Table<O> child, ForeignKey<O, UsertypeRecord> key) {
        super(child, key, USERTYPE);
    }

    @Override
    public Schema getSchema() {
        return Inventorymanagement.INVENTORYMANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USERTYPE_PRIMARY, Indexes.USERTYPE_USERTYPE_NAME_UNIQUE);
    }

    @Override
    public Identity<UsertypeRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USERTYPE;
    }

    @Override
    public UniqueKey<UsertypeRecord> getPrimaryKey() {
        return Keys.KEY_USERTYPE_PRIMARY;
    }

    @Override
    public List<UniqueKey<UsertypeRecord>> getKeys() {
        return Arrays.<UniqueKey<UsertypeRecord>>asList(Keys.KEY_USERTYPE_PRIMARY, Keys.KEY_USERTYPE_USERTYPE_NAME_UNIQUE);
    }

    @Override
    public Usertype as(String alias) {
        return new Usertype(DSL.name(alias), this);
    }

    @Override
    public Usertype as(Name alias) {
        return new Usertype(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Usertype rename(String name) {
        return new Usertype(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Usertype rename(Name name) {
        return new Usertype(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
