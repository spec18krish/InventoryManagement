/*
 * This file is generated by jOOQ.
 */
package com.ims.dataAccess.tables;


import com.ims.dataAccess.Indexes;
import com.ims.dataAccess.Inventorymanagement;
import com.ims.dataAccess.Keys;
import com.ims.dataAccess.tables.records.ProductRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Product extends TableImpl<ProductRecord> {

    private static final long serialVersionUID = -68998640;

    /**
     * The reference instance of <code>inventorymanagement.product</code>
     */
    public static final Product PRODUCT = new Product();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductRecord> getRecordType() {
        return ProductRecord.class;
    }

    /**
     * The column <code>inventorymanagement.product.productId</code>.
     */
    public final TableField<ProductRecord, Integer> PRODUCTID = createField(DSL.name("productId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>inventorymanagement.product.name</code>.
     */
    public final TableField<ProductRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.product.availableStock</code>.
     */
    public final TableField<ProductRecord, Integer> AVAILABLESTOCK = createField(DSL.name("availableStock"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.product.productDescription</code>.
     */
    public final TableField<ProductRecord, String> PRODUCTDESCRIPTION = createField(DSL.name("productDescription"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "");

    /**
     * The column <code>inventorymanagement.product.price</code>.
     */
    public final TableField<ProductRecord, Long> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.product.image</code>.
     */
    public final TableField<ProductRecord, byte[]> IMAGE = createField(DSL.name("image"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * The column <code>inventorymanagement.product.categoryId</code>.
     */
    public final TableField<ProductRecord, Integer> CATEGORYID = createField(DSL.name("categoryId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>inventorymanagement.product.brandId</code>.
     */
    public final TableField<ProductRecord, Integer> BRANDID = createField(DSL.name("brandId"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>inventorymanagement.product.dealerId</code>.
     */
    public final TableField<ProductRecord, Integer> DEALERID = createField(DSL.name("dealerId"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>inventorymanagement.product</code> table reference
     */
    public Product() {
        this(DSL.name("product"), null);
    }

    /**
     * Create an aliased <code>inventorymanagement.product</code> table reference
     */
    public Product(String alias) {
        this(DSL.name(alias), PRODUCT);
    }

    /**
     * Create an aliased <code>inventorymanagement.product</code> table reference
     */
    public Product(Name alias) {
        this(alias, PRODUCT);
    }

    private Product(Name alias, Table<ProductRecord> aliased) {
        this(alias, aliased, null);
    }

    private Product(Name alias, Table<ProductRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Product(Table<O> child, ForeignKey<O, ProductRecord> key) {
        super(child, key, PRODUCT);
    }

    @Override
    public Schema getSchema() {
        return Inventorymanagement.INVENTORYMANAGEMENT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCT_PRIMARY, Indexes.PRODUCT_PRODUCT_BRANDID_FK, Indexes.PRODUCT_PRODUCT_CATEGORYID_FK, Indexes.PRODUCT_PRODUCT_DEALERID_FK);
    }

    @Override
    public Identity<ProductRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PRODUCT;
    }

    @Override
    public UniqueKey<ProductRecord> getPrimaryKey() {
        return Keys.KEY_PRODUCT_PRIMARY;
    }

    @Override
    public List<UniqueKey<ProductRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductRecord>>asList(Keys.KEY_PRODUCT_PRIMARY);
    }

    @Override
    public List<ForeignKey<ProductRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ProductRecord, ?>>asList(Keys.PRODUCT_CATEGORYID_FK, Keys.PRODUCT_BRANDID_FK, Keys.PRODUCT_DEALERID_FK);
    }

    public Productcategory productcategory() {
        return new Productcategory(this, Keys.PRODUCT_CATEGORYID_FK);
    }

    public Brand brand() {
        return new Brand(this, Keys.PRODUCT_BRANDID_FK);
    }

    public Dealer dealer() {
        return new Dealer(this, Keys.PRODUCT_DEALERID_FK);
    }

    @Override
    public Product as(String alias) {
        return new Product(DSL.name(alias), this);
    }

    @Override
    public Product as(Name alias) {
        return new Product(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(String name) {
        return new Product(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Product rename(Name name) {
        return new Product(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, Integer, String, Long, byte[], Integer, Integer, Integer> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
